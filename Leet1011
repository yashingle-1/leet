A conveyor belt has packages that must be shipped from one port to another within days days.

The ith package on the conveyor belt has a weight of weights[i]. Each day, we load the ship with packages on the conveyor belt (in the order given by weights). We may not load more weight than the maximum weight capacity of the ship.

Return the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within days days.

 

Example 1:

Input: weights = [1,2,3,4,5,6,7,8,9,10], days = 5
Output: 15
Explanation: A ship capacity of 15 is the minimum to ship all the packages in 5 days like this:
1st day: 1, 2, 3, 4, 5
2nd day: 6, 7
3rd day: 8
4th day: 9
5th day: 10

Note that the cargo must be shipped in the order given, so using a ship of capacity 14 and splitting the packages into parts like (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) is not allowed.
Example 2:

Input: weights = [3,2,2,4,1,4], days = 3
Output: 6
Explanation: A ship capacity of 6 is the minimum to ship all the packages in 3 days like this:
1st day: 3, 2
2nd day: 2, 4
3rd day: 1, 4
Example 3:

Input: weights = [1,2,3,1,1], days = 4
Output: 3
Explanation:
1st day: 1
2nd day: 2
3rd day: 3
4th day: 1, 1
 

Constraints:

1 <= days <= weights.length <= 5 * 104
1 <= weights[i] <= 500


class Solution{
    public int shipWithinDays(int[] weights, int days){
        //range will be max. of array and sum of array..
        int start = Integer.MIN_VALUE; //for finding max element
        int end = 0; //sum of array

        for( int i=0; i<weights.length; i++){
            if(weights[i] > start){
                start=weights[i];
            }
            end = end+weights[i];
        }
        int res = -1;

        while (start<=end){
            //max capacity that can be shipped in one day
            int mid = start + (end-start)/2;
            //if shipment is possible then minimize the capacity
            if(isShipmentPossible(weights,mid,days)){
                res = mid;
                end = mid-1;
            }else{
                start = mid+1;
            }
        }
        return res;
    }

    static boolean isShipmentPossible(int weights[], int maxCapacity, int days){
        int currentDay = 1;
        int capacity = 0;
        for (int i=0; i<weights.length; i++){
            capacity += weights[i];
            //if capacity exceed max capacity
            if (capacity > maxCapacity){
                //ship on the next day
                currentDay+= 1;
                capacity = weights[i];
            }
            if (currentDay > days){
                return false;
            }
        }
        return true;
    }
}
